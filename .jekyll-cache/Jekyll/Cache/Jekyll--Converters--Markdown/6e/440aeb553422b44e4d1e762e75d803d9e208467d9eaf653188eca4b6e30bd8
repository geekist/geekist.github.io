I"$<p>基于阿里云CES服务器和Nginx-1.75.5配置SSL证书的步骤</p>

<h2 id="step1下载ssl证书到本地">step1：下载ssl证书到本地。</h2>
<p>登录ssl证书控制台。
在概览页面，单击证书列表上方的证书状态下拉列表，选择已签发。
单击下载，定位Nginx服务器，单击下载。可以得到两个文件：cert-file-name.pem和cert-file-name.key</p>

<h2 id="step2在nginx独立服务器上安装证书">step2：在Nginx独立服务器上安装证书。</h2>

<p>1、登录Nginx服务器，
这里选择了MobaXterm工具，打开MobaXterm，选择sessions—&gt;new session 进入session settings页面，选择SSH并设置Remote host和Specify username。</p>

<p>2、上传证书文件到/usr/local/nginx/conf目录。
运行 cd /usr/local/nginx/conf 使用工具将文件上传到该目录</p>

<p>3、编辑Nginx的配置文件nginx.conf,修改与证书相关的配置内容。
vim /usr/local/nginx/conf/nginx.conf
i键进入编辑模式，
添加下面的配置：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">server</span> <span class="o">{</span>
    <span class="n">listen</span> <span class="mi">443</span> <span class="n">ssl</span><span class="o">;</span>
    <span class="err">#</span><span class="n">配置HTTPS的默认访问端口为443</span><span class="err">。</span>
    <span class="err">#</span><span class="n">如果未在此处配置HTTPS的默认访问端口</span><span class="err">，</span><span class="n">可能会造成Nginx无法启动</span><span class="err">。</span>
    <span class="err">#</span><span class="n">如果您使用Nginx</span> <span class="mf">1.15</span><span class="o">.</span><span class="mi">0</span><span class="n">及以上版本</span><span class="err">，</span><span class="n">请使用listen</span> <span class="mi">443</span> <span class="n">ssl代替listen</span> <span class="mi">443</span><span class="n">和ssl</span> <span class="n">on</span><span class="err">。</span>
    <span class="n">server_name</span> <span class="n">yourdomain</span><span class="o">.</span><span class="na">com</span><span class="o">;</span> <span class="err">#</span><span class="n">需要将yourdomain</span><span class="o">.</span><span class="na">com替换成证书绑定的域名</span><span class="err">。</span>
    <span class="n">root</span> <span class="n">html</span><span class="o">;</span>
    <span class="n">index</span> <span class="n">index</span><span class="o">.</span><span class="na">html</span> <span class="n">index</span><span class="o">.</span><span class="na">htm</span><span class="o">;</span>
    <span class="n">ssl_certificate</span> <span class="n">cert</span><span class="o">/</span><span class="n">cert</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">name</span><span class="o">.</span><span class="na">pem</span><span class="o">;</span>  <span class="err">#</span><span class="n">需要将cert</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">name</span><span class="o">.</span><span class="na">pem替换成已上传的证书文件的名称</span><span class="err">。</span>
    <span class="n">ssl_certificate_key</span> <span class="n">cert</span><span class="o">/</span><span class="n">cert</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">name</span><span class="o">.</span><span class="na">key</span><span class="o">;</span> <span class="err">#</span><span class="n">需要将cert</span><span class="o">-</span><span class="n">file</span><span class="o">-</span><span class="n">name</span><span class="o">.</span><span class="na">key替换成已上传的证书密钥文件的名称</span><span class="err">。</span>
    <span class="n">ssl_session_timeout</span> <span class="mi">5</span><span class="n">m</span><span class="o">;</span>
    <span class="n">ssl_ciphers</span> <span class="no">ECDHE</span><span class="o">-</span><span class="no">RSA</span><span class="o">-</span><span class="no">AES128</span><span class="o">-</span><span class="no">GCM</span><span class="o">-</span><span class="nl">SHA256:ECDHE:ECDH:AES:HIGH:</span><span class="o">!</span><span class="nl">NULL:</span><span class="o">!</span><span class="nl">aNULL:</span><span class="o">!</span><span class="nl">MD5:</span><span class="o">!</span><span class="nl">ADH:</span><span class="o">!</span><span class="no">RC4</span><span class="o">;</span>
    <span class="err">#</span><span class="n">表示使用的加密套件的类型</span><span class="err">。</span>
    <span class="n">ssl_protocols</span> <span class="nc">TLSv1</span> <span class="nc">TLSv1</span><span class="o">.</span><span class="mi">1</span> <span class="nc">TLSv1</span><span class="o">.</span><span class="mi">2</span><span class="o">;</span> <span class="err">#</span><span class="n">表示使用的TLS协议的类型</span><span class="err">。</span>
    <span class="n">ssl_prefer_server_ciphers</span> <span class="n">on</span><span class="o">;</span>
    <span class="n">location</span> <span class="o">/</span> <span class="o">{</span>
        <span class="n">root</span> <span class="n">html</span><span class="o">;</span>  <span class="err">#</span><span class="n">站点目录</span><span class="err">。</span>
        <span class="n">index</span> <span class="n">index</span><span class="o">.</span><span class="na">html</span> <span class="n">index</span><span class="o">.</span><span class="na">htm</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>可选配置：
可选：设置HTTP请求自动跳转HTTPS。
如果您希望所有的HTTP访问自动跳转到HTTPS页面，则可以在需要跳转的HTTP站点下添加以下rewrite语句。
使用示例代码前，请注意将yourdomain.com替换成证书绑定的域名。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">server</span> <span class="o">{</span>
    <span class="n">listen</span> <span class="mi">80</span><span class="o">;</span>
    <span class="n">server_name</span> <span class="n">yourdomain</span><span class="o">.</span><span class="na">com</span><span class="o">;</span> <span class="err">#</span><span class="n">需要将yourdomain</span><span class="o">.</span><span class="na">com替换成证书绑定的域名</span><span class="err">。</span>
    <span class="n">rewrite</span> <span class="o">^(.*)</span><span class="err">$</span> <span class="nl">https:</span><span class="c1">//$host$1; #将所有HTTP请求通过rewrite指令重定向到HTTPS。</span>
    <span class="n">location</span> <span class="o">/</span> <span class="o">{</span>
        <span class="n">index</span> <span class="n">index</span><span class="o">.</span><span class="na">html</span> <span class="n">index</span><span class="o">.</span><span class="na">htm</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>按esc退回，:wq! 保存该文件。</p>

<p>4、重启Nginx服务。</p>

<p>cd /usr/local/nginx/sbin  #进入Nginx服务的可执行目录。
./nginx -s reload  #重新载入配置文件。</p>

<p>5、错误处理
Nginx如果未开启SSL模块，配置Https时提示错误“nginx: [emerg] the “ssl” parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37”</p>

<p>原因也很简单，nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了，如果已经安装好了Nginx，则可以按照下面的步骤来配置ssl：</p>

<p>切换到源码包：
cd /usr/local/src/nginx-1.11.3</p>

<p>查看nginx原有的模块</p>

<p>/usr/local/nginx/sbin/nginx -V</p>

<p>在configure arguments:后面显示的原有的configure参数如下：</p>

<p>–prefix=/usr/local/nginx –with-http_stub_status_module</p>

<p>那么我们的新配置信息就应该这样写：</p>

<p>./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module</p>

<p>回车，等待配置完成后，运行命令</p>

<p>make</p>

<p>这里不要进行make install，否则就是覆盖安装</p>

<p>然后备份原有已安装好的nginx</p>

<p>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</p>

<p>停止Nginx：
停止操作
停止操作是通过向nginx进程发送信号来进行的</p>

<p>步骤1：查询nginx主进程号</p>

<p>ps -ef | grep nginx
在进程列表里 面找master进程，它的编号就是主进程号了。</p>

<p>从容停止Nginx：
kill -QUIT 主进程号<br />
例如：kill -QUIT 16391</p>

<p>快速停止Nginx：
kill -TERM 主进程号</p>

<p>强制停止Nginx：
kill -9 主进程号</p>

<p>然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）</p>

<p>cp ./objs/nginx /usr/local/nginx/sbin/</p>

<p>然后启动nginx
nginx -c /usr/local/nginx/conf/nginx.conf</p>

<p>仍可以通过命令查看是否已经加入成功</p>

<p>/usr/local/nginx/sbin/nginx -V</p>

:ET