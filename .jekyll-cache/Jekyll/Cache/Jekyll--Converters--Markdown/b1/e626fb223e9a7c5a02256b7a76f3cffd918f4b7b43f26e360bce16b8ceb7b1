I"n<p><strong>方法一：共享静态数据。</strong></p>

<p>此方法参见《Windows 核心编程》第 5 版 17.1.2 章节《在同一个可执行文件或 DLL 的多个实例间共享静态数据》。</p>

<p>实现原理：</p>

<p>创建一个自己命名的段，将其属性改为 READ|WRITE|SHARED，其中 SHARED 属性表示该段的内容为多个实例所共享（实际上关闭了写时复制机制），将变量放在该段内若值被改变，多个实例间都会受到改变的影响。</p>

<p>注意点：</p>

<ul>
  <li>最好使用 volatile 修饰变量。</li>
  <li>对变量的增减推荐使用原子操作函数 InterlockedExchangedAdd。</li>
  <li>g_lInstances 的值在第一个实例运行时总为 0，其它实例中取到的值以先于它运行的实例中改变后的值为准。</li>
</ul>

<p>示例代码：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;Windows.h&gt;
</span>
<span class="cp">#pragma data_seg("Shared")
</span><span class="k">volatile</span> <span class="kt">long</span> <span class="n">g_lInstances</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="cp">#pragma data_seg()
</span>
<span class="cp">#pragma comment(linker, "/Section:Shared,RWS")
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">g_lInstances</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">InterlockedExchangeAdd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_lInstances</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// do something here</span>
    <span class="c1">// ...</span>

    <span class="n">InterlockedExchangeAdd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_lInstances</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>方法二：使用 Mutex。</strong></p>

<p>理论上能用于进程间同步的内核对象比如事件和互斥量等都能用于实现此功能，此处使用互斥量 Mutex 举例。</p>

<p>实现原理：</p>

<p>使用操作系统范围内可见的命名内核对象，不同实例间检测同一个内核对象的状态来判断是否为当前唯一实例。</p>

<p>注意点：</p>

<ul>
  <li>内核对象要使用全局命名，比如此处使用 Global 开头。</li>
</ul>

<p>示例代码：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;Windows.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">HANDLE</span> <span class="n">hMutex</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">hMutex</span> <span class="o">=</span> <span class="n">CreateMutex</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="s">"Global</span><span class="se">\\</span><span class="s">73E21C80-1960-472F-BF0B-3EE7CC7AF17E"</span><span class="p">);</span>

        <span class="n">DWORD</span> <span class="n">dwError</span> <span class="o">=</span> <span class="n">GetLastError</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">ERROR_ALREADY_EXISTS</span> <span class="o">==</span> <span class="n">dwError</span> <span class="o">||</span> <span class="n">ERROR_ACCESS_DENIED</span> <span class="o">==</span> <span class="n">dwError</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// do something here</span>
        <span class="c1">// ...</span>

    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nb">false</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">hMutex</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">CloseHandle</span><span class="p">(</span><span class="n">hMutex</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET