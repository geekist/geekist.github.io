I"WC<p>本文是个人对<a href="http://acl.readthedocs.org/en/latest/zhCN/ch2-cn.html">第二章：欢迎来到 Lisp——ANSI Common Lisp 中文版</a> 一文中习题的解答。</p>

<p><strong>1. 描述下列表达式求值之后的结果：</strong></p>

<p>(a) (+ (- 5 1) (+ 3 7))</p>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">14</code></p>

<p>(b) (list 1 (+ 2 3))</p>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">(1 5)</code></p>

<p>(c) (if (listp 1) (+ 1 2) (+ 3 4))</p>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">7</code></p>

<p>(d) (list (and (listp 3) t) (+ 1 2))</p>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">(NIL 3)</code></p>

<p><strong>2. 给出 3 种不同表示 (a b c) 的 cons 表达式 。</strong></p>

<p><strong>答案：</strong></p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">cons</span> <span class="ss">'a</span> <span class="o">'</span><span class="p">(</span><span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
<span class="p">(</span><span class="nb">cons</span> <span class="ss">'a</span> <span class="p">(</span><span class="nb">cons</span> <span class="ss">'b</span> <span class="o">'</span><span class="p">(</span><span class="nv">c</span><span class="p">)))</span>
<span class="p">(</span><span class="nb">cons</span> <span class="ss">'a</span> <span class="p">(</span><span class="nb">cons</span> <span class="ss">'b</span> <span class="p">(</span><span class="nb">cons</span> <span class="ss">'c</span> <span class="no">nil</span><span class="p">)))</span>
</code></pre></div></div>

<p><strong>3. 使用 car 与 cdr 来定义一个函数，返回一个列表的第四个元素。</strong></p>

<p><strong>答案：</strong></p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-forth</span><span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))</span>
</code></pre></div></div>

<p><strong>4. 定义一个函数，接受两个实参，返回两者当中较大的那个。</strong></p>

<p><strong>答案：</strong></p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-max</span><span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
    <span class="nv">y</span>
    <span class="nv">x</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>5. 这些函数做了什么？</strong></p>

<p>(a)</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">enigma</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">x</span><span class="p">))</span>
       <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">null</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">))</span>
           <span class="p">(</span><span class="nv">enigma</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)))))</span>
</code></pre></div></div>

<p><strong>答案：</strong>判断 x 列表中是否有 nil 元素</p>

<p>(b)</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">mystery</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">y</span><span class="p">)</span>
    <span class="no">nil</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eql</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
      <span class="mi">0</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">z</span> <span class="p">(</span><span class="nv">mystery</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">y</span><span class="p">))))</span>
        <span class="p">(</span><span class="nb">and</span> <span class="nv">z</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">z</span> <span class="mi">1</span><span class="p">))))))</span>
</code></pre></div></div>

<p><strong>答案：</strong>查找 x 在列表 y 中的下标，如果没有则为 nil</p>

<p><strong>6. 下列表达式， x 该是什么，才会得到相同的结果？</strong></p>

<p>(a) &gt; (car (x (cdr ‘(a (b c) d))))</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>B
</code></pre></div></div>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">car</code></p>

<p>(b) &gt; (x 13 (/ 1 0))</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13
</code></pre></div></div>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">or</code></p>

<p>(c) &gt; (x #’list 1 nil)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)
</code></pre></div></div>

<p><strong>答案：</strong><code class="language-plaintext highlighter-rouge">or '(1)</code> 或 <code class="language-plaintext highlighter-rouge">apply</code></p>

<p><strong>7. 只使用本章所介绍的操作符，定义一个函数，它接受一个列表作为实参，如果有一个元素是列表时，就返回真。</strong></p>

<p><strong>答案：</strong></p>

<p>非递归版本</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">has-child-list</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="no">nil</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">setf</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">listp</span> <span class="nv">obj</span><span class="p">))))</span>
    <span class="nv">x</span><span class="p">))</span>
</code></pre></div></div>

<p>递归版本</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">has-child-list-re</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
    <span class="no">nil</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">listp</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span>
      <span class="no">t</span>
      <span class="p">(</span><span class="nv">has-child-list-re</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))</span>
</code></pre></div></div>

<p><strong>8. 给出函数的迭代与递归版本：</strong></p>

<p>a. 接受一个正整数，并打印出数字数量的点。</p>

<p><strong>答案：</strong></p>

<p>非递归版本</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-dots</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">do</span> <span class="p">((</span><span class="nv">i</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">i</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="p">((</span><span class="nb">=</span> <span class="nv">i</span> <span class="nv">n</span> <span class="p">)</span> <span class="ss">'done</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">"."</span><span class="p">)))</span>
</code></pre></div></div>

<p>递归版本</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-dots-re</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
    <span class="ss">'done</span>
    <span class="p">(</span><span class="k">progn</span>
      <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">"."</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">print-dots-re</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>
</code></pre></div></div>

<p>b. 接受一个列表，并返回 a 在列表里所出现的次数。</p>

<p><strong>答案：</strong></p>

<p>非递归版本：</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-a-times</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
   <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">flag</span> <span class="ss">'a</span><span class="p">)(</span><span class="nv">x</span> <span class="mi">0</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">obj</span> <span class="nv">lst</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">setf</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eql</span> <span class="nv">obj</span> <span class="nv">flag</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))))</span>
     <span class="nv">x</span><span class="p">))</span>
</code></pre></div></div>

<p>递归版本：</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-a-times-re</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
    <span class="mi">0</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">flag</span> <span class="ss">'a</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eql</span> <span class="nv">flag</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">print-a-times-re</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))))))</span>
</code></pre></div></div>

<p><strong>9. 一位朋友想写一个函数，返回列表里所有非 nil 元素的和。他写了此函数的两个版本，但两个都不能工作。请解释每一个的错误在哪里，并给出正确的版本。</strong></p>

<p>(a)</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">summit</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">remove</span> <span class="no">nil</span> <span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">apply</span> <span class="nf">#'</span><span class="nb">+</span> <span class="nv">lst</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>答案：</strong>因为 remove 并不会改变 lst 本身。正确的程序：</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">summit</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">newlst</span> <span class="p">(</span><span class="nb">remove</span> <span class="no">nil</span> <span class="nv">lst</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">apply</span> <span class="nf">#'</span><span class="nb">+</span> <span class="nv">newlst</span><span class="p">)))</span>
</code></pre></div></div>

<p>(b)</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">summit</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">x</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">summit</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">summit</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))))))</span>
</code></pre></div></div>

<p><strong>答案：</strong>因为递归没有边界退出分支。正确的程序：</p>

<div class="language-cl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">summit</span> <span class="p">(</span><span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">lst</span><span class="p">)</span>
    <span class="mi">0</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">lst</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">summit</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">))</span>
        <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">summit</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">lst</span><span class="p">)))))))</span>
</code></pre></div></div>
:ET