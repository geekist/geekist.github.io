I"[<p>小菜鸟才学习 Java 没多久，这天要写一个存储长整形的列表，于是这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">listData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;();</span>
</code></pre></div></div>

<p>这时 Android Studio 不高兴了，在 long 下面打上红色波浪线，然后提示小菜鸟：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type argument cannot be of primitive type
</code></pre></div></div>

<p>赶紧进 List 的定义看了一下，发现类型参数必须是引用类型，不能用原始数值类型。</p>

<p>于是就改为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">listData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;();</span>
</code></pre></div></div>

<p>这时 Android Studio 不说什么了，于是小菜鸟很开心地继续往下写，往 listData 里添加了一些 long 类型的值，并且给它们排了序，如果发现它们中有相邻并且不相等的元素后执行一些操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">listData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">listData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="n">listData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// do something</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这时 Android Studio 貌似又不高兴了，在 <code class="language-plaintext highlighter-rouge">!=</code> 上加上黄底色，指上去一看显示：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Number objects are compared using '!=', not 'equals()'
</code></pre></div></div>

<p>小菜鸟不高兴了，我比较两个 long 类型都非得用方法，不能用操作符了吗？（他脑子里的定势一直以为 List 的类型参数还是 long 呢），Java 就是比 C++ 矫情。想想 IDE 这里只是警告，并不是错误，所以也不加理会继续完成他的代码去了。</p>

<p>但是到后来怎么运行结果都不太对，明明给 List 里添加的元素里有相等的，有些情况下应该不进入 if 才对，可是却每次比较完都进了 if。百思不得其解之后想起了 Android Studio 的警告，然后把 <code class="language-plaintext highlighter-rouge">!=</code> 改成 <code class="language-plaintext highlighter-rouge">!list.get(i -1).equals(listData.get(i))</code>，立马就好了。</p>

<p>小菜鸟惭愧极了，基础不牢靠啊，赶紧翻出自己的 Java 入门书对应的章节看了一下，看完才恍然大悟，原来 Java 里的比较运算符里还有这么多小细节呢……不是把 C++ 里的经验直接照搬过来就行了的。</p>

<h3 id="java-比较运算符里的一些细节">Java 比较运算符里的一些细节</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&gt;</code>、<code class="language-plaintext highlighter-rouge">&gt;=</code>、<code class="language-plaintext highlighter-rouge">&lt;</code> 和 <code class="language-plaintext highlighter-rouge">&lt;=</code> 只支持两边操作数都是数值类型。</li>
  <li><code class="language-plaintext highlighter-rouge">==</code> 和 <code class="language-plaintext highlighter-rouge">!=</code> 两边的操作数可以都是数值类型，也可以都是引用类型，但必须是同一个类的实例。</li>
  <li>当 <code class="language-plaintext highlighter-rouge">obj1</code> 和 <code class="language-plaintext highlighter-rouge">obj2</code> 引用同一个对象时，则 <code class="language-plaintext highlighter-rouge">obj1 == obj2</code>，否则 <code class="language-plaintext highlighter-rouge">obj1 != obj2</code>。</li>
  <li>每种数值类型都有对应的包装类，比如 long 的包装类 Long。包装类的实例可以与数值型的值比较，是直接取出包装类实例所包装的数值来比较的。</li>
  <li>
    <p>涉及自动装箱后情况复杂了一些，比如</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">ina</span> <span class="o">=</span> <span class="mi">18</span><span class="o">;</span>
<span class="nc">Integer</span> <span class="n">inb</span> <span class="o">=</span> <span class="mi">18</span><span class="o">;</span>

<span class="nc">Integer</span> <span class="n">inc</span> <span class="o">=</span> <span class="mi">188</span><span class="o">;</span>
<span class="nc">Integer</span> <span class="n">ind</span> <span class="o">=</span> <span class="mi">188</span><span class="o">;</span>
</code></pre></div>    </div>

    <p>这时 <code class="language-plaintext highlighter-rouge">ina == inb</code> 成立，而 <code class="language-plaintext highlighter-rouge">inc == ind</code> 不成立。</p>

    <p>原因是在 java.lang.Integer 类里，对 -128~127 之间的整数自动装箱成 Integer 实例，并且缓存了起来，所以对此范围内的整数自动装箱时，实际上都指向了缓存里的对象，所以会出现上面的情况。</p>

    <p>与此类似的是 String 类型也会对诸如 <code class="language-plaintext highlighter-rouge">String stra = "Hello";</code> 这样的直接赋值创建的实例进行缓存。</p>
  </li>
</ul>

<h3 id="最佳实践">最佳实践</h3>

<ul>
  <li>引用类型实例之间，除非想要知道是否是引用同一个对象，否则它们之间的比较，总是使用 <code class="language-plaintext highlighter-rouge">equals()</code> 方法。</li>
</ul>

<h3 id="参考">参考</h3>

<p>《疯狂 Java 讲义》——李刚著 第 3.7.5 节 比较运算符。</p>
:ET