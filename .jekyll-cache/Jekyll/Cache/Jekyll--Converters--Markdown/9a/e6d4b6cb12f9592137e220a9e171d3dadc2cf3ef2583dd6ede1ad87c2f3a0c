I"<p>因为饱受 GFM 和 Redcarpet 两种 Markdown 引擎生成 TOC 链接的差异的折磨，而我又不得不同时使用它们——博客基于 Jekyll 使用 Redcarpet（<em>Update 2016/09/16: GitHub Pages 现在已经改为只支持 kramdown</em>），而其它放在 GitHub 仓库里的文档使用 GFM，我决定为我常用的 Markdown 编辑器 Vim 做一款同时支持 GFM 和 Redcarpet 两种 TOC 链接风格的 Table of Contents 自动生成插件。</p>

<p>这算是我真正意义上完全独立开发的第一款实用 Vim 插件，当然开发过程中也参考了别人的做法。</p>

<h2 id="下载地址">下载地址</h2>

<ul>
  <li><a href="https://github.com/mzlogin/vim-markdown-toc">vim-markdown-toc</a></li>
</ul>

<h2 id="功能">功能</h2>

<ul>
  <li>
    <p>为 Markdown 文件生成 Table of Contents，目前支持 GFM 和 Redcarpet 两种链接风格。</p>
  </li>
  <li>
    <p>更新已经存在的 Table of Contents。</p>
  </li>
  <li>
    <p>保存文件时自动更新 Table of Contents。</p>
  </li>
</ul>

<h2 id="使用方法">使用方法</h2>

<h3 id="生成-table-of-contents">生成 Table of Contents</h3>

<p>将光标移动到想在后面插入 Table of Contents 的那一行，然后运行下面的某个命令：</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">:GenTocGFM</code></p>

    <p>生成 GFM 链接风格的 Table of Contents。</p>

    <p>适用于 GitHub 仓库里的 Markdown 文件，比如 README.md，也适用用于生成 GitBook 的 Markdown 文件。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">:GenTocRedcarpet</code></p>

    <p>生成 Redcarpet 链接风格的 Table of Contents。</p>

    <p>适用于使用 Redcarpet 作为 Markdown 引擎的 Jekyll 项目或其它地方。</p>
  </li>
</ol>

<h3 id="更新已存在的-table-of-contents">更新已存在的 Table of Contents</h3>

<p>通常不需要手动做这件事，保存文件时会自动更新已经存在的 Table of Contents。</p>

<p>除非是在配置里关闭了保存时自动更新，并且维持插入 Table of Contents 前后的 <code class="language-plaintext highlighter-rouge">&lt;!-- vim-markdown-toc --&gt;</code>，此时可使用 <code class="language-plaintext highlighter-rouge">:UpdateToc</code> 命令手动更新。</p>

<h3 id="删除-table-of-contents">删除 Table of Contents</h3>

<p><code class="language-plaintext highlighter-rouge">:RemoveToc</code> 命令可以帮你删除本插件生成的 Table of Contents。</p>

<h2 id="安装方法">安装方法</h2>

<p>推荐使用 <a href="http://github.com/VundleVim/Vundle.Vim">Vundle</a> 来管理你的 Vim 插件，这样你就可以简单三步完成安装：</p>

<ol>
  <li>
    <p>在你的 vimrc 文件中添加如下内容：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Plugin 'mzlogin/vim-markdown-toc'
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">:so $MYVIMRC</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">:PluginInstall</code></p>
  </li>
</ol>

<p>使用 vim-plug 安装的过程的与此基本一样。</p>

<h2 id="配置选项">配置选项</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">g:vmt_auto_update_on_save</code></p>

    <p>默认值：1</p>

    <p>插件会自动更新已经存在的 Table of Contents，如果你不想要这个功能，可以在你的 vimrc 文件里加入如下内容关闭：</p>

    <div class="language-viml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:vmt_auto_update_on_save</span> <span class="p">=</span> <span class="m">0</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">g:vmt_dont_insert_fence</code></p>

    <p>默认值：0</p>

    <p>在默认情况下，<code class="language-plaintext highlighter-rouge">:GenTocXXX</code> 命令会在插入的 Table of Contents 前后加上 <code class="language-plaintext highlighter-rouge">&lt;!-- vim-markdown-toc --&gt;</code>，这是为了实现自动和手动更新 Table of Contents 功能。</p>

    <p>如果你不想看到它们，可以在 vimrc 文件里加入如下内容移除：</p>

    <div class="language-viml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:vmt_dont_insert_fence</span> <span class="p">=</span> <span class="m">1</span>
</code></pre></div>    </div>

    <p>需要注意的是移除之后插件将无法再帮你保存文件时自动更新 Table of Contents 了，也无法使用 <code class="language-plaintext highlighter-rouge">:UpdateToc</code> 命令了。这里如果还想更新 Table of Contents，只能先手动删除已经存在的，然后重新运行 <code class="language-plaintext highlighter-rouge">:GenTocXXX</code> 命令。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">g:vmt_cycle_list_item_markers</code></p>

    <p>默认值：0</p>

    <p>在默认情况下，所有 Table of Contents 项目前面的标记都是 <code class="language-plaintext highlighter-rouge">*</code>：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* [Level 1](#level-1)
    * [Level 1-1](#level-1-1)
    * [Level 1-2](#level-1-2)
        * [Level 1-2-1](#level-1-2-1)
* [Level 2](level-2)
</code></pre></div>    </div>

    <p>这里提供一个选项改变这个行为，如果设置：</p>

    <div class="language-viml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">g:vmt_cycle_list_item_markers</span> <span class="p">=</span> <span class="m">1</span>
</code></pre></div>    </div>

    <p>那标记将根据级别循环使用 <code class="language-plaintext highlighter-rouge">*</code>、<code class="language-plaintext highlighter-rouge">-</code> 和 <code class="language-plaintext highlighter-rouge">+</code>：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* [Level 1](#level-1)
    - [Level 1-1](#level-1-1)
    - [Level 1-2](#level-1-2)
        + [Level 1-2-1](#level-1-2-1)
* [Level 2](level-2)
</code></pre></div>    </div>

    <p>这不会影响 Markdown 文档解析后的显示效果，只用于提升源文件的可读性。</p>
  </li>
</ol>

<h2 id="屏幕截图">屏幕截图</h2>

<p><a href="https://github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.en.md">使用本插件生成 TOC 的英文文档在线示例</a></p>

<p><img src="https://github.com/mzlogin/vim-markdown-toc/raw/master/screenshots/english.gif" alt="" /></p>

<p><a href="https://mazhuang.org/wiki/chinese-copywriting-guidelines/">使用本插件生成 TOC 的中文文档在线示例</a></p>

<p><img src="https://github.com/mzlogin/vim-markdown-toc/raw/master/screenshots/chinese.gif" alt="" /></p>

<h2 id="参考链接">参考链接</h2>

<ul>
  <li><a href="https://mazhuang.org/2015/12/05/diff-between-gfm-and-redcarpet/">GFM 与 Redcarpet 的不同点</a></li>
  <li><a href="https://github.com/ajorgensen/vim-markdown-toc">ajorgensen/vim-markdown-toc</a></li>
</ul>
:ET